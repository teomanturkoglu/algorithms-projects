#include "methods.h"

int getMax(std::vector<Item>& items, const std::string& attribute)
{
    int max_val = 0;

    if (attribute == "age") {
        for (const auto& item : items) { //iterate through items to find max age
            if (item.age > max_val) {
                max_val = item.age;
            }
        }
    }
    else if (attribute == "type") {
        max_val = 4; //set max possible value for type
    }
    else if (attribute == "origin") {
        max_val = 6; //set max possible value for origin
    }
    else if (attribute == "rarityScore") {
        for (const auto& item : items) { //iterate through items to find max rarity score
            int rarityScore = static_cast<int>(item.rarityScore);
            if (rarityScore > max_val) {
                max_val = rarityScore;
            }
        }
    }
    return max_val;
}

// min = age - ageWindow
// max = age + ageWindow
// rarityScore = (1 - probability) * (1 + item.age/ageMax)
void calculateRarityScores(std::vector<Item>& items, int ageWindow)
{
    int age_max = getMax(items, "age");

    for (auto& item : items) { //calculating the rarity score for each item
        int min_age = item.age - ageWindow; //defining the age range for near-age window
        int max_age = item.age + ageWindow;
        int count_similar = 0;
        int count_total = 0;

        for (const auto& other : items) { //comparing current item with others within age window
            if (other.age >= min_age && other.age <= max_age) { //checking if there are other item within age window
                count_total++;
                if (item.type == other.type && item.origin == other.origin) { //check if type and origin match
                    count_similar++;
                }
            }
        }

        double prob = (count_total > 0) ? (static_cast<double>(count_similar) / count_total) : 0.0; //probability
        item.rarityScore = (1-prob) * (1 + (static_cast<double>(item.age) / age_max));
    }
}
