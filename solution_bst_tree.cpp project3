#include <iostream> 
#include <stdlib.h>
#include <iomanip>
#include <string.h>
#include <string>
#include <fstream>
#include <vector>
#include <algorithm>
#include <stack>
#include <iomanip>
#include <chrono>
#include <random>
using namespace std;
using namespace std::chrono;

/////////////////// Player ///////////////////
class publisher
{
public:
	string name;
	float na_sales;
	float eu_sales;
	float others_sales;
};

/////////////////// Node ///////////////////
class Node{
	public:
		publisher key;
		int color; // "Red"=1 or "Black"=0
		Node *parent, *left, *right;
	
		Node(publisher);
		~Node();
		int get_color();
        void set_color(int);
};

/////////////////// BST-Tree ///////////////////
class BST_tree{
	private:
		Node* root;
	public:	
        publisher* best_seller[3];	
		stack<string> tree_deep_stack;

        Node* get_root();

		Node* BST_insert(Node* root, Node* ptr);
		void insertValue(vector<string>);
        void find_best_seller(); 

        BST_tree();
		~BST_tree();
};

/////////////////// Name-BST ///////////////////
class Name_Node{
    public:
    string name;
    Name_Node *parent, *left, *right;

    Name_Node(string name);
	~Name_Node();
};

class Name_BST{
    private:
        Name_Node *root;
    public:
        Name_Node* get_root();
        Name_Node* insertName(string name);

        Name_BST();
        ~Name_BST();
};

Name_BST::Name_BST() {
    this->root = NULL;
}

Name_BST::~Name_BST() {
}


Name_Node* Name_BST::get_root(){
    return this->root;
}

Name_Node* Name_BST::insertName(string name){
    Name_Node* new_node = new Name_Node(name);
    Name_Node* temp = this->root;
    Name_Node* parent = NULL;

    while(temp != NULL){
        parent = temp;

        if(name < temp->name){
            temp = temp->left;
        }else{
            temp = temp->right;
        }
    }

    if(parent == NULL){
        this->root = new_node;

    }else if(name < parent->name){
        parent->left = new_node;

    }else{
        parent->right = new_node;
    }

    new_node->parent = parent;

    return new_node;
}

Name_Node::Name_Node(string name){
    this->name = name;
    this->parent = NULL;
    this->left = NULL;
    this->right = NULL;
}

Name_Node::~Name_Node(){
}

Name_BST generate_Name_tree_from_csv(string file_name){ //this one does not take year into account
    Name_BST temp_Nametree;
    ifstream file(file_name);
    string line, name;
    int pos = 0, i = 1;

    while (getline(file, line)){ //no title line so we dont pass
        pos = 0;
        if ((pos = line.find(',')) != string::npos){
            name = line.substr(0, pos);
            temp_Nametree.insertName(name);
        }
    }
    return temp_Nametree;
}

void in_order_name_traversal(Name_Node* root, vector<string>& names) {
    if (root == nullptr) {
        return;
    }

    in_order_name_traversal(root->left, names);

    if (find(names.begin(), names.end(), root->name) == names.end()) {
        names.push_back(root->name);
    }

    in_order_name_traversal(root->right, names);
}

vector<string> get_unique_names(Name_BST& tree) {
    vector<string> names;
    in_order_name_traversal(tree.get_root(), names);

    return names;
}

/////////////////// FUNCTIONS ///////////////////
void print_best_sellers(int year, publisher* temp_publisher[3]){
    cout.precision(5);
    cout<< "End of the "+to_string(year)+" Year"<<endl;
    cout<< "Best seller in North America: "+temp_publisher[0]->name+" - "<<temp_publisher[0]->na_sales<<" million"<<endl;
    cout<< "Best seller in Europe: "+temp_publisher[1]->name+" - "<<temp_publisher[1]->eu_sales<<" million"<<endl;
    cout<< "Best seller rest of the World: "+temp_publisher[2]->name+" - "<<temp_publisher[2]->others_sales<<" million"<<endl;
}

BST_tree generate_BST_tree_from_csv(string file_name){
    BST_tree temp_BSTtree;
    ifstream file(file_name);
    string line;
    vector<string> row;
    int pos = 0, decade, curr_year;

    getline(file, line); //pass title
    
    getline(file, line); //doing it once more to find the first decade
    while ((pos = line.find(',')) != string::npos){
        row.push_back(line.substr(0, pos));
        line.erase(0, pos + 1);
    }
    row.push_back(line); //to add the last element after the last comma
    temp_BSTtree.insertValue(row);

    if(curr_year%10 == 0){ //if its the start of a decade
        decade = stoi(row[2]);
    }else{ //find the start if its in the middle
        decade = (stoi(row[2])/10)*10+1;
    }
    
    while (getline(file, line)){
        row.clear();
        pos = 0;

        while ((pos = line.find(',')) != string::npos){
            row.push_back(line.substr(0, pos));
            line.erase(0, pos + 1);
        }
        row.push_back(line); //to add the last element after the last comma

        curr_year = stoi(row[2]);
        if(curr_year > (decade + 10)/10*10){ //if the current decade has ended, print best sellers
            temp_BSTtree.find_best_seller();
            print_best_sellers(((decade + 10)/10*10), temp_BSTtree.best_seller);

            if(curr_year%10 == 0){ //if its the start of a decade
                decade = curr_year;
            }else{
                decade = (curr_year/10)*10+1;
            }
        }
        temp_BSTtree.insertValue(row);
    }
    temp_BSTtree.find_best_seller();
    print_best_sellers(((decade + 10)/10*10), temp_BSTtree.best_seller);

    return temp_BSTtree;
}

//ADDITIONAL FUNCTIONS
Node* search(BST_tree tree, Node* root, string name){
    if (root == nullptr || root->key.name == name)
        return root;

    if (root->key.name < name)
        return search(tree, root->right, name);

    return search(tree, root->left, name);
}

Name_Node* search(Name_BST tree, Name_Node* root, string name){
    if (root == nullptr || root->name == name)
        return root;

    if (root->name < name)
        return search(tree, root->right, name);

    return search(tree, root->left, name);
}

void in_order_traversal(Node* root, vector<string>& publishers) {
    if (root == nullptr) {
        return;
    }

    in_order_traversal(root->left, publishers);

    if (find(publishers.begin(), publishers.end(), root->key.name) == publishers.end()) {
        publishers.push_back(root->key.name);
    }

    in_order_traversal(root->right, publishers);
}

vector<string> get_unique_publishers(BST_tree& tree) {
    vector<string> publishers;
    in_order_traversal(tree.get_root(), publishers);

    return publishers;
}

vector<string> read_to_vector(string file_name){
    ifstream file(file_name);
    string line;
    vector<string> vec;
    getline(file, line); //pass title

    while (getline(file, line)){
        vec.push_back(line);
    }

    return vec;
}

void write_to_file(vector<string> vec, string file_name){
    ofstream file(file_name);
    for (int i = 0; i < vec.size(); i++){
        file << vec[i] << endl;
    }
}

////////////////////////////////////////////
//----------------- MAIN -----------------//
////////////////////////////////////////////
int main(int argc, char* argv[]){

	string fname = argv[1]; //VideGames.csv
    
    //PART A
    auto start = high_resolution_clock::now();
    BST_tree BSTtree = generate_BST_tree_from_csv(fname);
    auto end = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(end - start).count();
    cout << "Time taken to insert all data into BST: " << duration << " µs" << endl;
    
    //PART B
    vector<string> publishers = get_unique_publishers(BSTtree);
    random_device rd;
    mt19937 g(rd());
    shuffle(publishers.begin(), publishers.end(), g);

    auto search_start = high_resolution_clock::now();
    for (int i = 0; i < 50; ++i) {
        search(BSTtree, BSTtree.get_root(), publishers[i]);
    }
    auto search_end = high_resolution_clock::now();
    auto search_duration = duration_cast<nanoseconds>(search_end - search_start).count() / 50;
    cout << "Average time for 50 random searches: " << search_duration << " ns" << endl;
    
    //PART F
    vector<string> data = read_to_vector(fname);
    stable_sort(data.begin(), data.end()); //sort according to game name

    string fname2 = "VideGames_sorted.csv";
    write_to_file(data, fname2); //create a new file with sorted data

    start = high_resolution_clock::now();
    Name_BST sortedBST = generate_Name_tree_from_csv(fname2);
    end = high_resolution_clock::now();
    duration = duration_cast<microseconds>(end - start).count();
    cout << "Time taken to insert all data into BST (name order): " << duration << " µs" << endl;
    
    vector<string> names = get_unique_names(sortedBST);
    shuffle(names.begin(), names.end(), g);

    search_start = high_resolution_clock::now();
    for (int i = 0; i < 50; ++i) {
        search(sortedBST, sortedBST.get_root(), (names)[i]);
    }
    search_end = high_resolution_clock::now();
    search_duration = duration_cast<nanoseconds>(search_end - search_start).count() / 50;
    cout << "Average time for 50 random searches (name order): " << search_duration << " ns" << endl;

	return EXIT_SUCCESS;
}

/////////////////// Node ///////////////////

Node::Node(publisher key){
	this->key = key;
	this->parent = NULL;
	this->left = NULL;
	this->right = NULL;
}

Node* BST_tree::get_root(){
    return this->root;
}

Node* BST_tree::BST_insert(Node* root, Node* ptr){
    if (root == nullptr) {
		root = ptr;
        return ptr;
    }

    if (ptr->key.name < root->key.name) {
        root->left = BST_insert(root->left, ptr);
        root->left->parent = root;

    } else if (ptr->key.name > root->key.name) {
        root->right = BST_insert(root->right, ptr);
        root->right->parent = root;

    }else{ //the case publisher name already exists in tree
		root->key.na_sales += ptr->key.na_sales;
        root->key.eu_sales += ptr->key.eu_sales;
        root->key.others_sales += ptr->key.others_sales;
	}
    return root;
}

void BST_tree::insertValue(vector<string> n){
    publisher pub;
    pub.name = n[3];
    pub.na_sales = stof(n[4]);
    pub.eu_sales = stof(n[5]);
    pub.others_sales = stof(n[6]);

    Node* node = new Node(pub);
    this->root = BST_insert(this->root, node);
}

void BST_tree::find_best_seller(){
    publisher* temp_publisher[3] = {NULL, NULL, NULL};
    stack<Node*> s;
    Node* curr = this->root;

    while (curr != NULL || s.empty() == false){
        while (curr !=  NULL){
            s.push(curr);
            curr = curr->left;
        }
        curr = s.top();
        s.pop();

        if(temp_publisher[0] == NULL || curr->key.na_sales > temp_publisher[0]->na_sales){
            temp_publisher[0] = &curr->key;
        }
        if(temp_publisher[1] == NULL || curr->key.eu_sales > temp_publisher[1]->eu_sales){
            temp_publisher[1] = &curr->key;
        }
        if(temp_publisher[2] == NULL || curr->key.others_sales > temp_publisher[2]->others_sales){
            temp_publisher[2] = &curr->key;
        }

        curr = curr->right;
    }

    this->best_seller[0] = temp_publisher[0];
    this->best_seller[1] = temp_publisher[1];
    this->best_seller[2] = temp_publisher[2];
}

BST_tree::BST_tree(){
	this->root = NULL;
    this->best_seller[0] = NULL;
    this->best_seller[1] = NULL;
    this->best_seller[2] = NULL;
}

BST_tree::~BST_tree(){
}
